/**
 * Encode SVG SCSS
 * http://codepen.io/jakob-e/pen/doMoML
 * @use background-image: svg('<svg xmlns="http://www.w3.org/2000/svg">.....</svg>');
 */

//  Function to create an optimized svg url
@function svg($svg) {
  //    
  //  Chunk up string in order to avoid 
  //  "stack level too deep" error
  //     
  $encoded: '';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg)/$slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    // Encode (may need a few extra replacements)
    // $chunk: str-replace($chunk,'"','\'');
    $chunk: str-replace($chunk, '\'', '%27');
    $chunk: str-replace($chunk, '"', '%22');
    $chunk: str-replace($chunk, '<', '%3C');
    $chunk: str-replace($chunk, '>', '%3E');
    $chunk: str-replace($chunk, '&', '%26');
    $chunk: str-replace($chunk, '#', '%23');
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}

//  Helper function to replace characters in a string
@function str-replace($string,
$search,
$replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string,
    1,
    $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)),
    $search,
    $replace);
  }
  @return $string;
}


/**
 * SVG Stack Sprite system
 */

@function sprite($id) {
  @return url('#{spritePath}##{$id}');
}

// local mixins
// SVG Stack Sprite system
@function xlink($id) {
  @return url('../svg/icons.svg##{$id}');
}
